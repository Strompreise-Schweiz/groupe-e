name: Promote dev → main (auto)

on:
  push:
    branches: [dev]

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    uses: Strompreise-Schweiz/supplier-data-validation/.github/workflows/validate_supplier.yml@main
    with:
      supplier_schema_version: v1

  promote:
    needs: validate
    if: ${{ needs.validate.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Create (or reuse) PR dev → main and enable auto-merge (squash)
        # Uses the built-in GITHUB_TOKEN; no personal tokens needed
        # Prereqs:
        #  - Repo: Settings → General → Pull Requests → "Allow auto-merge" ✅
        #  - Org/Repo: Settings → Actions → Workflow permissions → Read & write + "Allow ... create/approve PRs" ✅
        #  - Branch protection on main with required checks (no reviews required)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // 1) Find an open PR from dev → main
            const prs = await github.paginate(
              github.rest.pulls.list,
              { owner, repo, state: 'open', base: 'main', head: `${owner}:dev` }
            );
            let pr = prs[0];

            // 2) Create it if it doesn't exist
            if (!pr) {
              const created = await github.rest.pulls.create({
                owner, repo,
                head: 'dev',
                base: 'main',
                title: 'Promote dev → main (auto)',
                body: 'Created automatically after a successful validation run.'
              });
              pr = created.data;
            }

            // 3) Enable auto-merge (SQUASH)
            //    Requires "Allow auto-merge" in repo settings + branch protection conditions met.
            const repoData = await github.rest.repos.get({ owner, repo });
            const prData  = await github.rest.pulls.get({ owner, repo, pull_number: pr.number });

            await github.graphql(`
              mutation($prId:ID!) {
                enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) {
                  clientMutationId
                }
              }
            `, { prId: prData.data.node_id });

            core.info(`Auto-merge enabled on PR #${pr.number}`);
